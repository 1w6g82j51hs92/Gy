-- Cleanup existing GUIs
local coreGui = game:GetService("CoreGui")
local relzHub = coreGui:FindFirstChild("RelzHub")
local screenGui = coreGui:FindFirstChild("ScreenGui")
if relzHub then relzHub:Destroy() end
if screenGui then screenGui:Destroy() end

-- Set global colors
_G.Primary = Color3.fromRGB(100, 100, 100)
_G.Dark = Color3.fromRGB(22, 22, 26)
_G.Third = Color3.fromRGB(255, 0, 0)

-- Utility function for rounded corners
local function CreateRounded(Parent, Size)
    local Rounded = Instance.new("UICorner")
    Rounded.Name = "Rounded"
    Rounded.CornerRadius = UDim.new(0, Size)
    Rounded.Parent = Parent
end

-- Draggable function
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local function MakeDraggable(topbarobject, object)
    local Dragging, DragInput, DragStart, StartPosition
    local function Update(input)
        local Delta = input.Position - DragStart
        local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X,
            StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
        local Tween = TweenService:Create(object, TweenInfo.new(0.15), {Position = pos})
        Tween:Play()
    end

    topbarobject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            DragStart = input.Position
            StartPosition = object.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)
    topbarobject.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            DragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == DragInput and Dragging then
            Update(input)
        end
    end)
end

-- Main GUI container
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game:GetService("CoreGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Outline Button
local OutlineButton = Instance.new("Frame")
OutlineButton.Name = "OutlineButton"
OutlineButton.Parent = ScreenGui
OutlineButton.ClipsDescendants = true
OutlineButton.BackgroundColor3 = _G.Dark
OutlineButton.BackgroundTransparency = 0
OutlineButton.Position = UDim2.new(0, 10, 0, 10)
OutlineButton.Size = UDim2.new(0, 50, 0, 50)
CreateRounded(OutlineButton, 12)

local ImageButton = Instance.new("ImageButton")
ImageButton.Parent = OutlineButton
ImageButton.Position = UDim2.new(0.5, 0, 0.5, 0)
ImageButton.Size = UDim2.new(0, 40, 0, 40)
ImageButton.AnchorPoint = Vector2.new(0.5, 0.5)
ImageButton.BackgroundColor3 = _G.Dark
ImageButton.ImageColor3 = Color3.fromRGB(250, 250, 250)
ImageButton.ImageTransparency = 0
ImageButton.BackgroundTransparency = 0
ImageButton.Image = "rbxassetid://13940080072"
ImageButton.AutoButtonColor = false

MakeDraggable(ImageButton, OutlineButton)

CreateRounded(ImageButton, 10)

-- Toggle the visibility of RelzHub
ImageButton.MouseButton1Click:Connect(function()
    local relz = coreGui:FindFirstChild("RelzHub")
    if relz then
        relz.Enabled = not relz.Enabled
    end
end)

-- Notification GUI
local NotificationFrame = Instance.new("ScreenGui")
NotificationFrame.Name = "NotificationFrame"
NotificationFrame.Parent = coreGui
NotificationFrame.ZIndexBehavior = Enum.ZIndexBehavior.Global

local NotificationList = {}

local function RemoveOldestNotification()
    if #NotificationList > 0 then
        local removed = table.remove(NotificationList, 1)
        removed[1]:TweenPosition(UDim2.new(0.5, 0, -0.2, 0), "Out", "Quad", 0.4, true, function()
            removed[1]:Destroy()
        end)
    end
end

spawn(function()
    while true do
        wait()
        if #NotificationList > 0 then
            wait(2)
            RemoveOldestNotification()
        end
    end
end)

local Update = {}

function Update:Notify(desc)
    local OutlineFrame = Instance.new("Frame")
    local Frame = Instance.new("Frame")
    local Image = Instance.new("ImageLabel")
    local Title = Instance.new("TextLabel")
    local Desc = Instance.new("TextLabel")
    local OutlineFrame = Instance.new("Frame")

    OutlineFrame.Name = "OutlineFrame"
    OutlineFrame.Parent = NotificationFrame
    OutlineFrame.ClipsDescendants = true
    OutlineFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    OutlineFrame.AnchorPoint = Vector2.new(0.5, 1)
    OutlineFrame.BackgroundTransparency = 0.4
    OutlineFrame.Position = UDim2.new(0.5, 0, -0.2, 0)
    OutlineFrame.Size = UDim2.new(0, 412, 0, 72)

    Frame.Name = "Frame"
    Frame.Parent = OutlineFrame
    Frame.ClipsDescendants = true
    Frame.AnchorPoint = Vector2.new(0.5, 0.5)
    Frame.BackgroundColor3 = _G.Dark
    Frame.BackgroundTransparency = 0.1
    Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    Frame.Size = UDim2.new(0, 400, 0, 60)

    Image.Name = "Icon"
    Image.Parent = Frame
    Image.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Image.BackgroundTransparency = 1
    Image.Position = UDim2.new(0, 8, 0, 8)
    Image.Size = UDim2.new(0, 45, 0, 45)
    Image.Image = "rbxassetid://13940080072"
    Image.ImageTransparency = 0

    Title.Parent = Frame
    Title.BackgroundColor3 = _G.Primary
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 55, 0, 14)
    Title.Size = UDim2.new(0, 10, 0, 20)
    Title.Font = Enum.Font.GothamBold
    Title.Text = "Relz Hub (Cracked)"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 16
    Title.TextXAlignment = Enum.TextXAlignment.Left

    Desc.Parent = Frame
    Desc.BackgroundColor3 = _G.Primary
    Desc.BackgroundTransparency = 1
    Desc.Position = UDim2.new(0, 55, 0, 33)
    Desc.Size = UDim2.new(0, 10, 0, 10)
    Desc.Font = Enum.Font.GothamSemibold
    Desc.TextTransparency = 0.3
    Desc.Text = desc
    Desc.TextColor3 = Color3.fromRGB(200, 200, 200)
    Desc.TextSize = 12
    Desc.TextXAlignment = Enum.TextXAlignment.Left

    CreateRounded(Frame, 10)
    CreateRounded(OutlineFrame, 12)

    -- Animate the notification
    OutlineFrame:TweenPosition(UDim2.new(0.5, 0, 0.1 + (#NotificationList) * 0.1, 0), "Out", "Quad", 0.4, true)

    -- Save to list for auto-removal
    table.insert(NotificationList, {OutlineFrame, Title})
end

function Update:StartLoad()
    local Loader = Instance.new("ScreenGui")
    Loader.Parent = coreGui
    Loader.ZIndexBehavior = Enum.ZIndexBehavior.Global
    Loader.DisplayOrder = 1000

    local LoaderFrame = Instance.new("Frame")
    LoaderFrame.Name = "LoaderFrame"
    LoaderFrame.Parent = Loader
    LoaderFrame.ClipsDescendants = true
    LoaderFrame.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
    LoaderFrame.BackgroundTransparency = 0
    LoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    LoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    LoaderFrame.Size = UDim2.new(1.5, 0, 1.5, 0)
    LoaderFrame.BorderSizePixel = 0

    local MainLoaderFrame = Instance.new("Frame")
    MainLoaderFrame.Name = "MainLoaderFrame"
    MainLoaderFrame.Parent = LoaderFrame
    MainLoaderFrame.ClipsDescendants = true
    MainLoaderFrame.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
    MainLoaderFrame.BackgroundTransparency = 0
    MainLoaderFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainLoaderFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainLoaderFrame.Size = UDim2.new(0.5, 0, 0.5, 0)
    MainLoaderFrame.BorderSizePixel = 0

    local TitleLoader = Instance.new("TextLabel")
    TitleLoader.Parent = MainLoaderFrame
    TitleLoader.Text = "Relz Hub (cracked)"
    TitleLoader.Font = Enum.Font.FredokaOne
    TitleLoader.TextSize = 50
    TitleLoader.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLoader.BackgroundTransparency = 1
    TitleLoader.AnchorPoint = Vector2.new(0.5, 0.5)
    TitleLoader.Position = UDim2.new(0.5, 0, 0.3, 0)
    TitleLoader.Size = UDim2.new(0.8, 0, 0.2, 0)

    local DescriptionLoader = Instance.new("TextLabel")
    DescriptionLoader.Parent = MainLoaderFrame
    DescriptionLoader.Text = "Loading.."
    DescriptionLoader.Font = Enum.Font.Gotham
    DescriptionLoader.TextSize = 15
    DescriptionLoader.TextColor3 = Color3.fromRGB(255, 255, 255)
    DescriptionLoader.BackgroundTransparency = 1
    DescriptionLoader.AnchorPoint = Vector2.new(0.5, 0.5)
    DescriptionLoader.Position = UDim2.new(0.5, 0, 0.6, 0)
    DescriptionLoader.Size = UDim2.new(0.8, 0, 0.2, 0)

    local LoadingBarBackground = Instance.new("Frame")
    LoadingBarBackground.Parent = MainLoaderFrame
    LoadingBarBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    LoadingBarBackground.AnchorPoint = Vector2.new(0.5, 0.5)
    LoadingBarBackground.Position = UDim2.new(0.5, 0, 0.7, 0)
    LoadingBarBackground.Size = UDim2.new(0.7, 0, 0.05, 0)
    LoadingBarBackground.ClipsDescendants = true
    LoadingBarBackground.BorderSizePixel = 0
    LoadingBarBackground.ZIndex = 2
    CreateRounded(LoadingBarBackground, 20)

    local LoadingBar = Instance.new("Frame")
    LoadingBar.Parent = LoadingBarBackground
    LoadingBar.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    LoadingBar.Size = UDim2.new(0, 0, 1, 0)
    LoadingBar.ZIndex = 3
    CreateRounded(LoadingBarBackground, 20)
    CreateRounded(LoadingBar, 20)

    local tweenService = game:GetService("TweenService")
    local dotCount = 0
    local running = true

    local barTweenInfoPart1 = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    local barTweenPart1 = tweenService:Create(LoadingBar, barTweenInfoPart1, {Size = UDim2.new(0.25, 0, 1, 0)})

    local barTweenInfoPart2 = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    local barTweenPart2 = tweenService:Create(LoadingBar, barTweenInfoPart2, {Size = UDim2.new(1, 0, 1, 0)})

    barTweenPart1:Play()

    function Update:Loaded()
        barTweenPart2:Play()
    end

    barTweenPart1.Completed:Connect(function()
        wait(1)
        running = false
        DescriptionLoader.Text = "Loaded!"
        wait(0.5)
        Loader:Destroy()
    end)

    spawn(function()
        while running do
            wait(0.5)
            dotCount = (dotCount + 1) % 4
            local dots = string.rep(".", dotCount)
            DescriptionLoader.Text = "Please wait" .. dots
        end
    end)
end

-- Settings library
local SettingsLib = {
    SaveSettings = true,
    LoadAnimation = true
}

-- Load configuration
(getgenv()).LoadConfig = function()
    if readfile and writefile and isfile and isfolder then
        if not isfolder("Relz Hub") then makefolder("Relz Hub") end
        if not isfolder("Relz Hub/Library/") then makefolder("Relz Hub/Library/") end
        local filename = "Relz Hub/Library/" .. game.Players.LocalPlayer.Name .. ".json"
        if not isfile(filename) then
            writefile(filename, (game:GetService("HttpService")):JSONEncode(SettingsLib))
        else
            local Decode = (game:GetService("HttpService")):JSONDecode(readfile(filename))
            for i, v in pairs(Decode) do
                SettingsLib[i] = v
            end
        end
        print("Library Loaded!")
    else
        warn("Status : Undetected Executor")
    end
end

-- Save configuration
(getgenv()).SaveConfig = function()
    if readfile and writefile and isfile and isfolder then
        local filename = "Relz Hub/Library/" .. game.Players.LocalPlayer.Name .. ".json"
        if not isfile(filename) then
            Load() -- you might want to define Load or remove this
        else
            local Decode = (game:GetService("HttpService")):JSONDecode(readfile(filename))
            local Array = {}
            for i, v in pairs(SettingsLib) do
                Array[i] = v
            end
            writefile(filename, (game:GetService("HttpService")):JSONEncode(Array))
        end
    else
        warn("Status : Undetected Executor")
    end
end

-- Run initial load
(getgenv()).LoadConfig()

-- Utility functions for settings
function Update:SaveSettings()
    return SettingsLib.SaveSettings or false
end

function Update:LoadAnimation()
    return SettingsLib.LoadAnimation or false
end

-- Main Window Creation Function
function Update:Window(Config)
    assert(Config.SubTitle, "v4") -- ensure SubTitle exists

    local WindowConfig = {
        Size = Config.Size,
        TabWidth = Config.TabWidth
    }

    local osfunc = {}
    local uihide = false
    local abc = false
    local currentpage = ""
    local keybind = keybind or Enum.KeyCode.RightControl

    local yoo = tostring(keybind):gsub("Enum.KeyCode.", "")

    -- Main GUI frame
    local RelzHub = Instance.new("ScreenGui")
    RelzHub.Name = "RelzHub"
    RelzHub.Parent = game:GetService("CoreGui")
    RelzHub.DisplayOrder = 999

    local OutlineMain = Instance.new("Frame")
    OutlineMain.Name = "OutlineMain"
    OutlineMain.Parent = RelzHub
    OutlineMain.ClipsDescendants = true
    OutlineMain.AnchorPoint = Vector2.new(0.5, 0.5)
    OutlineMain.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    OutlineMain.BackgroundTransparency = 0.4
    OutlineMain.Position = UDim2.new(0.5, 0, 0.45, 0)
    OutlineMain.Size = UDim2.new(0, 0, 0, 0)
    CreateRounded(OutlineMain, 15)

    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Parent = OutlineMain
    Main.ClipsDescendants = true
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = Color3.fromRGB(24, 24, 26)
    Main.BackgroundTransparency = 0
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = WindowConfig.Size
    CreateRounded(Main, 12)

    -- Drag button area
    local DragButton = Instance.new("Frame")
    DragButton.Name = "DragButton"
    DragButton.Parent = Main
    DragButton.Position = UDim2.new(1, 5, 1, 5)
    DragButton.AnchorPoint = Vector2.new(1,1)
    DragButton.Size = UDim2.new(0, 15, 0, 15)
    DragButton.BackgroundColor3 = _G.Primary
    DragButton.BackgroundTransparency = 1
    DragButton.ZIndex = 10
    CreateRounded(DragButton, 6)

    -- Top bar
    local Top = Instance.new("Frame")
    Top.Name = "Top"
    Top.Parent = Main
    Top.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    Top.Size = UDim2.new(1, 0, 0, 40)
    Top.BackgroundTransparency = 1
    CreateRounded(Top, 5)

    -- Hub name label
    local NameHub = Instance.new("TextLabel")
    NameHub.Name = "NameHub"
    NameHub.Parent = Top
    NameHub.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    NameHub.BackgroundTransparency = 1
    NameHub.RichText = true
    NameHub.Position = UDim2.new(0, 15, 0.5, 0)
    NameHub.AnchorPoint = Vector2.new(0, 0.5)
    NameHub.Size = UDim2.new(0, 1, 0, 25)
    NameHub.Font = Enum.Font.GothamBold
    NameHub.Text = "Relz Hub"
    NameHub.TextSize = 20
    NameHub.TextColor3 = Color3.fromRGB(255, 255, 255)
    NameHub.TextXAlignment = Enum.TextXAlignment.Left

    local nameHubSize = (game:GetService("TextService")):GetTextSize(NameHub.Text, NameHub.TextSize, NameHub.Font, Vector2.new(math.huge, math.huge))
    NameHub.Size = UDim2.new(0, nameHubSize.X, 0, 25)

    -- Subtitle
    local SubTitle = Instance.new("TextLabel")
    SubTitle.Name = "SubTitle"
    SubTitle.Parent = NameHub
    SubTitle.BackgroundColor3 = Color3.fromRGB(255,255,255)
    SubTitle.BackgroundTransparency = 1
    SubTitle.Position = UDim2.new(0, nameHubSize.X + 8, 0.5, 0)
    SubTitle.Size = UDim2.new(0, 1, 0, 20)
    SubTitle.Font = Enum.Font.Cartoon
    SubTitle.AnchorPoint = Vector2.new(0, 0.5)
    SubTitle.Text = Config.SubTitle
    SubTitle.TextSize = 15
    SubTitle.TextColor3 = Color3.fromRGB(150,150,150)
    local SubTitleSize = (game:GetService("TextService")):GetTextSize(SubTitle.Text, SubTitle.TextSize, SubTitle.Font, Vector2.new(math.huge, math.huge))
    SubTitle.Size = UDim2.new(0, SubTitleSize.X, 0, 25)

    -- Close button
    local CloseButton = Instance.new("ImageButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = Top
    CloseButton.BackgroundColor3 = _G.Primary
    CloseButton.BackgroundTransparency = 1
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.Position = UDim2.new(1, -15, 0.5, 0)
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Image = "rbxassetid://7743878857"
    CloseButton.ImageColor3 = Color3.fromRGB(245,245,245)
    CreateRounded(CloseButton, 3)

    CloseButton.MouseButton1Click:Connect(function()
        local relz = coreGui:FindFirstChild("RelzHub")
        if relz then relz.Enabled = false end
    end)

    -- Resize button
    local ResizeButton = Instance.new("ImageButton")
    ResizeButton.Name = "ResizeButton"
    ResizeButton.Parent = Top
    ResizeButton.BackgroundColor3 = _G.Primary
    ResizeButton.BackgroundTransparency = 1
    ResizeButton.AnchorPoint = Vector2.new(1, 0.5)
    ResizeButton.Position = UDim2.new(1, -50, 0.5, 0)
    ResizeButton.Size = UDim2.new(0, 20, 0, 20)
    ResizeButton.Image = "rbxassetid://10734886735"
    ResizeButton.ImageColor3 = Color3.fromRGB(245,245,245)
    CreateRounded(ResizeButton, 3)

    -- Settings background
    local BackgroundSettings = Instance.new("Frame")
    BackgroundSettings.Name = "BackgroundSettings"
    BackgroundSettings.Parent = OutlineMain
    BackgroundSettings.ClipsDescendants = true
    BackgroundSettings.Active = true
    BackgroundSettings.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    BackgroundSettings.BackgroundTransparency = 0.3
    BackgroundSettings.Position = UDim2.new(0, 0, 0, 0)
    BackgroundSettings.Size = UDim2.new(1, 0, 1, 0)
    CreateRounded(BackgroundSettings, 15)
    BackgroundSettings.Visible = false

    -- Settings Frame
    local SettingsFrame = Instance.new("Frame")
    SettingsFrame.Name = "SettingsFrame"
    SettingsFrame.Parent = BackgroundSettings
    SettingsFrame.ClipsDescendants = true
    SettingsFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    SettingsFrame.BackgroundColor3 = Color3.fromRGB(24,24,26)
    SettingsFrame.BackgroundTransparency = 0
    SettingsFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    SettingsFrame.Size = UDim2.new(0.7, 0, 0.7, 0)
    CreateRounded(SettingsFrame, 15)

    -- Close Settings Button
    local CloseSettings = Instance.new("ImageButton")
    CloseSettings.Name = "CloseSettings"
    CloseSettings.Parent = SettingsFrame
    CloseSettings.BackgroundColor3 = _G.Primary
    CloseSettings.BackgroundTransparency = 1
    CloseSettings.AnchorPoint = Vector2.new(1, 0)
    CloseSettings.Position = UDim2.new(1, -20, 0, 15)
    CloseSettings.Size = UDim2.new(0, 20, 0, 20)
    CloseSettings.Image = "rbxassetid://10747384394"
    CloseSettings.ImageColor3 = Color3.fromRGB(245,245,245)
    CreateRounded(CloseSettings, 3)
    CloseSettings.MouseButton1Click:Connect(function()
        BackgroundSettings.Visible = false
    end)

    -- Settings button
    local SettingsButton = Instance.new("ImageButton")
    SettingsButton.Name = "SettingsButton"
    SettingsButton.Parent = Top
    SettingsButton.BackgroundColor3 = _G.Primary
    SettingsButton.BackgroundTransparency = 1
    SettingsButton.AnchorPoint = Vector2.new(1, 0.5)
    SettingsButton.Position = UDim2.new(1, -85, 0.5, 0)
    SettingsButton.Size = UDim2.new(0, 20, 0, 20)
    SettingsButton.Image = "rbxassetid://10734950020"
    SettingsButton.ImageColor3 = Color3.fromRGB(245,245,245)
    CreateRounded(SettingsButton, 3)
    SettingsButton.MouseButton1Click:Connect(function()
        BackgroundSettings.Visible = true
    end)

    -- Title Settings
    local TitleSettings = Instance.new("TextLabel")
    TitleSettings.Name = "TitleSettings"
    TitleSettings.Parent = SettingsFrame
    TitleSettings.BackgroundColor3 = Color3.fromRGB(255,255,255)
    TitleSettings.BackgroundTransparency = 1
    TitleSettings.Position = UDim2.new(0, 20, 0, 15)
    TitleSettings.Size = UDim2.new(1, 0, 0, 20)
    TitleSettings.Font = Enum.Font.GothamBold
    TitleSettings.Text = "Library Settings"
    TitleSettings.TextSize = 20
    TitleSettings.TextColor3 = Color3.fromRGB(245,245,245)
    TitleSettings.TextXAlignment = Enum.TextXAlignment.Left

    -- Settings list container
    local SettingsMenuList = Instance.new("Frame")
    SettingsMenuList.Name = "SettingsMenuList"
    SettingsMenuList.Parent = SettingsFrame
    SettingsMenuList.ClipsDescendants = true
    SettingsMenuList.AnchorPoint = Vector2.new(0, 0)
    SettingsMenuList.BackgroundColor3 = Color3.fromRGB(24,24,26)
    SettingsMenuList.BackgroundTransparency = 1
    SettingsMenuList.Position = UDim2.new(0, 0, 0, 50)
    SettingsMenuList.Size = UDim2.new(1, 0, 1, -70)
    CreateRounded(SettingsMenuList, 15)

    -- Scroll for settings
    local ScrollSettings = Instance.new("ScrollingFrame")
    ScrollSettings.Name = "ScrollSettings"
    ScrollSettings.Parent = SettingsMenuList
    ScrollSettings.Active = true
    ScrollSettings.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    ScrollSettings.Position = UDim2.new(0, 0, 0, 0)
    ScrollSettings.BackgroundTransparency = 1
    ScrollSettings.Size = UDim2.new(1, 0, 1, 0)
    ScrollSettings.ScrollBarThickness = 3
    ScrollSettings.ScrollingDirection = Enum.ScrollingDirection.Y
    CreateRounded(SettingsMenuList, 5)

    local SettingsListLayout = Instance.new("UIListLayout")
    SettingsListLayout.Name = "SettingsListLayout"
    SettingsListLayout.Parent = ScrollSettings
    SettingsListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    SettingsListLayout.Padding = UDim.new(0, 8)

    local PaddingScroll = Instance.new("UIPadding")
    PaddingScroll.Name = "PaddingScroll"
    PaddingScroll.Parent = ScrollSettings

    -- Utility function: create checkbox
    local function CreateCheckbox(title, state, callback)
        local checked = state or false

        local Background = Instance.new("Frame")
        Background.Name = "Background"
        Background.Parent = ScrollSettings
        Background.ClipsDescendants = true
        Background.BackgroundColor3 = Color3.fromRGB(24, 24, 26)
        Background.BackgroundTransparency = 1
        Background.Size = UDim2.new(1, 0, 0, 20)

        local Title = Instance.new("TextLabel")
        Title.Name = "Title"
        Title.Parent = Background
        Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Title.BackgroundTransparency = 1
        Title.Position = UDim2.new(0, 60, 0.5, 0)
        Title.Size = UDim2.new(1, -60, 0, 20)
        Title.Font = Enum.Font.Code
        Title.AnchorPoint = Vector2.new(0, 0.5)
        Title.Text = title or ""
        Title.TextSize = 15
        Title.TextColor3 = Color3.fromRGB(200, 200, 200)
        Title.TextXAlignment = Enum.TextXAlignment.Left

        local Checkbox = Instance.new("ImageButton")
        Checkbox.Name = "Checkbox"
        Checkbox.Parent = Background
        Checkbox.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        Checkbox.BackgroundTransparency = 0
        Checkbox.AnchorPoint = Vector2.new(0, 0.5)
        Checkbox.Position = UDim2.new(0, 30, 0.5, 0)
        Checkbox.Size = UDim2.new(0, 20, 0, 20)
        Checkbox.Image = "rbxassetid://10709790644"
        Checkbox.ImageTransparency = 1
        Checkbox.ImageColor3 = Color3.fromRGB(245, 245, 245)

        CreateRounded(Checkbox, 5)

        Checkbox.MouseButton1Click:Connect(function()
            checked = not checked
            if checked then
                Checkbox.ImageTransparency = 0
                Checkbox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            else
                Checkbox.ImageTransparency = 1
                Checkbox.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            end
            pcall(callback, checked)
        end)

        -- Initialize state
        if checked then
            Checkbox.ImageTransparency = 0
            Checkbox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        else
            Checkbox.ImageTransparency = 1
            Checkbox.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        end
        pcall(callback, checked)
    end

    -- Utility function: create button
    local function CreateButton(title, callback)
        local Background = Instance.new("Frame")
        Background.Name = "Background"
        Background.Parent = ScrollSettings
        Background.ClipsDescendants = true
        Background.BackgroundColor3 = Color3.fromRGB(24, 24, 26)
        Background.BackgroundTransparency = 1
        Background.Size = UDim2.new(1, 0, 0, 30)

        local Button = Instance.new("TextButton")
        Button.Name = "Button"
        Button.Parent = Background
        Button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        Button.BackgroundTransparency = 0
        Button.Size = UDim2.new(0.8, 0, 0, 30)
        Button.Font = Enum.Font.Code
        Button.Text = title or "Button"
        Button.AnchorPoint = Vector2.new(0.5, 0)
        Button.Position = UDim2.new(0.5, 0, 0, 0)
        Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        Button.TextSize = 15
        Button.AutoButtonColor = false

        CreateRounded(Button, 5)

        Button.MouseButton1Click:Connect(function()
            pcall(callback)
        end)
    end

    -- Create some example checkboxes & buttons
    CreateCheckbox("Save Settings", SettingsLib.SaveSettings, function(state)
        SettingsLib.SaveSettings = state
        (getgenv()).SaveConfig()
    end)

    CreateCheckbox("Loading Animation", SettingsLib.LoadAnimation, function(state)
        SettingsLib.LoadAnimation = state
        (getgenv()).SaveConfig()
    end)

    CreateButton("Reset Config", function()
        if isfolder("Relz Hub") then
            delfolder("Relz Hub")
        end
        Update:Notify("Config has been reset!")
    end)

    -- Tabs and pages
    local Tab = Instance.new("Frame")
    Tab.Name = "Tab"
    Tab.Parent = Main
    Tab.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    Tab.Position = UDim2.new(0, 8, 0, Top.Size.Y.Offset)
    Tab.BackgroundTransparency = 1
    Tab.Size = UDim2.new(0, WindowConfig.TabWidth, 0, Main.Size.Y.Offset - Top.Size.Y.Offset - 8)

    local ScrollTab = Instance.new("ScrollingFrame")
    ScrollTab.Name = "ScrollTab"
    ScrollTab.Parent = Tab
    ScrollTab.Active = true
    ScrollTab.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    ScrollTab.Position = UDim2.new(0, 0, 0, 0)
    ScrollTab.BackgroundTransparency = 1
    ScrollTab.Size = UDim2.new(1, 0, 1, 0)
    ScrollTab.ScrollBarThickness = 0
    ScrollTab.ScrollingDirection = Enum.ScrollingDirection.Y

    CreateRounded(Tab, 5)

    local TabListLayout = Instance.new("UIListLayout")
    TabListLayout.Name = "TabListLayout"
    TabListLayout.Parent = ScrollTab
    TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabListLayout.Padding = UDim.new(0, 2)

    local PPD = Instance.new("UIPadding")
    PPD.Name = "PPD"
    PPD.Parent = ScrollTab

    local Page = Instance.new("Frame")
    Page.Name = "Page"
    Page.Parent = Main
    Page.BackgroundColor3 = _G.Dark
    Page.Position = UDim2.new(0, ScrollTab.Size.X.Offset + 18, 0, Top.Size.Y.Offset)
    Page.Size = UDim2.new(1, -ScrollTab.Size.X.Offset - 25, 1, -Top.Size.Y.Offset)
    Page.BackgroundTransparency = 1
    CreateRounded(Page, 3)

    local MainPage = Instance.new("Frame")
    MainPage.Name = "MainPage"
    MainPage.Parent = Page
    MainPage.ClipsDescendants = true
    MainPage.BackgroundColor3 = Color3.fromRGB(255,255,255)
    MainPage.BackgroundTransparency = 1
    MainPage.Size = UDim2.new(1, 0, 1, 0)

    local PageList = Instance.new("Folder")
    PageList.Name = "PageList"
    PageList.Parent = MainPage

    local UIPageLayout = Instance.new("UIPageLayout")
    UIPageLayout.Parent = PageList
    UIPageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIPageLayout.EasingDirection = Enum.EasingDirection.InOut
    UIPageLayout.EasingStyle = Enum.EasingStyle.Quad
    UIPageLayout.FillDirection = Enum.FillDirection.Vertical
    UIPageLayout.Padding = UDim.new(0, 10)
    UIPageLayout.TweenTime = 0
    UIPageLayout.GamepadInputEnabled = false
    UIPageLayout.ScrollWheelInputEnabled = false
    UIPageLayout.TouchInputEnabled = false

    -- Make draggable the top bar
    MakeDraggable(Top, OutlineMain)

    -- Keyboard toggle
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            if input.KeyCode == Enum.KeyCode.Insert then
                local relz = coreGui:FindFirstChild("RelzHub")
                if relz then relz.Enabled = not relz.Enabled end
            end
        end
    end)

    -- Resize logic
    local resizing = false
    ResizeButton.MouseButton1Click:Connect(function()
        if not resizing then
            resizing = true
            -- Animate to maximize
            OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15), "Out", "Quad", 0.4, true)
            Main:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.4, true)
            ResizeButton.Image = "rbxassetid://10734895698"
        else
            resizing = false
            -- Animate to original size
            OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.4, true)
            ResizeButton.Image = "rbxassetid://10734886735"
        end
    end)

    -- Tab system
    local function createTab(text, img)
        local TabButton = Instance.new("TextButton")
        TabButton.Parent = ScrollTab
        TabButton.Name = text .. "Unique"
        TabButton.Text = ""
        TabButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        TabButton.BackgroundTransparency = 1
        TabButton.Size = UDim2.new(1, 0, 0, 35)
        TabButton.Font = Enum.Font.Nunito
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.TextSize = 12
        TabButton.TextTransparency = 0.9

        local SelectedTab = Instance.new("Frame")
        SelectedTab.Name = "SelectedTab"
        SelectedTab.Parent = TabButton
        SelectedTab.BackgroundColor3 = _G.Third
        SelectedTab.BackgroundTransparency = 0
        SelectedTab.Size = UDim2.new(0, 3, 0, 0)
        SelectedTab.Position = UDim2.new(0, 0, 0.5, 0)
        SelectedTab.AnchorPoint = Vector2.new(0, 0.5)

        local Title = Instance.new("TextLabel")
        Title.Parent = TabButton
        Title.Name = "Title"
        Title.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
        Title.BackgroundTransparency = 1
        Title.Position = UDim2.new(0, 30, 0.5, 0)
        Title.Size = UDim2.new(0, 100, 0, 30)
        Title.Font = Enum.Font.Roboto
        Title.Text = text
        Title.AnchorPoint = Vector2.new(0, 0.5)
        Title.TextColor3 = Color3.fromRGB(255, 255, 255)
        Title.TextSize = 14
        Title.TextXAlignment = Enum.TextXAlignment.Left

        local IDK = Instance.new("ImageLabel")
        IDK.Name = "IDK"
        IDK.Parent = TabButton
        IDK.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        IDK.BackgroundTransparency = 1
        IDK.ImageTransparency = 0.3
        IDK.Position = UDim2.new(0, 7, 0.5, 0)
        IDK.Size = UDim2.new(0, 15, 0, 15)
        IDK.AnchorPoint = Vector2.new(0, 0.5)
        IDK.Image = img

        CreateRounded(TabButton, 6)

        -- Main page for this tab
        local MainFramePage = Instance.new("ScrollingFrame")
        MainFramePage.Name = text .. "_Page"
        MainFramePage.Parent = PageList
        MainFramePage.Active = true
        MainFramePage.BackgroundColor3 = _G.Dark
        MainFramePage.Position = UDim2.new(0, 0, 0, 0)
        MainFramePage.BackgroundTransparency = 1
        MainFramePage.Size = UDim2.new(1, 0, 1, 0)
        MainFramePage.ScrollBarThickness = 0
        MainFramePage.ScrollingDirection = Enum.ScrollingDirection.Y

        local zzzR = Instance.new("UICorner")
        zzzR.Parent = MainFramePage
        zzzR.CornerRadius = UDim.new(0, 5)

        local UIListLayout = Instance.new("UIListLayout")
        UIListLayout.Parent = MainFramePage
        UIListLayout.Padding = UDim.new(0, 3)
        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

        -- Tab click event
        TabButton.MouseButton1Click:Connect(function()
            for _, v in ipairs(ScrollTab:GetChildren()) do
                if v:IsA("TextButton") then
                    TweenService:Create(v, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                    TweenService:Create(v.SelectedTab, TweenInfo.new(0, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 3, 0, 0)}):Play()
                    TweenService:Create(v.IDK, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 0.4}):Play()
                    TweenService:Create(v.Title, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0.4}):Play()
                end
            end
            TweenService:Create(TabButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
            TweenService:Create(SelectedTab, TweenInfo.new(0, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 3, 0, 15)}):Play()
            TweenService:Create(IDK, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 0}):Play()
            TweenService:Create(Title, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()

            -- Jump to page
            for _, v in ipairs(PageList:GetChildren()) do
                currentpage = text .. "_Page"
                if v.Name == currentpage then
                    UIPageLayout:JumpTo(v)
                end
            end
        end)

        -- Initialize first tab
        if not abc then
            for _, v in ipairs(ScrollTab:GetChildren()) do
                if v:IsA("TextButton") then
                    TweenService:Create(v, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                    TweenService:Create(v.SelectedTab, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 3, 0, 15)}):Play()
                    TweenService:Create(v.IDK, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 0.4}):Play()
                    TweenService:Create(v.Title, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0.4}):Play()
                end
            end
            UIPageLayout:JumpToIndex(1)
            abc = true
        end

        -- Canvas size update
        (game:GetService("RunService")).Stepped:Connect(function()
            pcall(function()
                MainPage.CanvasSize = UDim2.new(0, UIListLayout.AbsoluteContentSize.X, 0, UIListLayout.AbsoluteContentSize.Y)
                ScrollTab.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y)
            end)
        end)

        -- Resize toggle
        local defaultSize = true
        ResizeButton.MouseButton1Click:Connect(function()
            if defaultSize then
                defaultSize = false
                OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15), "Out", "Quad", 0.2, true)
                Main:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.4, true)
                ResizeButton.Image = "rbxassetid://10734895698"
            else
                defaultSize = true
                OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.2, true)
                Main:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.4, true)
                ResizeButton.Image = "rbxassetid://10734886735"
            end
        end)

        -- Main API functions
        local main = {}

        function main:Button(text, callback)
            local ButtonFrame = Instance.new("Frame")
            local UICorner = Instance.new("UICorner")
            local TextLabel = Instance.new("TextLabel")
            local TextButton = Instance.new("TextButton")
            local UICorner2 = Instance.new("UICorner")
            local Black = Instance.new("Frame")
            local UICorner3 = Instance.new("UICorner")
            ButtonFrame.Name = "Button"
            ButtonFrame.Parent = MainPage
            ButtonFrame.BackgroundColor3 = _G.Primary
            ButtonFrame.BackgroundTransparency = 1
            ButtonFrame.Size = UDim2.new(1, 0, 0, 36)
            UICorner.CornerRadius = UDim.new(0, 5)
            UICorner.Parent = ButtonFrame

            local ImageLabel = Instance.new("ImageLabel")
            ImageLabel.Name = "ImageLabel"
            ImageLabel.Parent = TextButton
            ImageLabel.BackgroundColor3 = _G.Primary
            ImageLabel.BackgroundTransparency = 1
            ImageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
            ImageLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
            ImageLabel.Size = UDim2.new(0, 15, 0, 15)
            ImageLabel.Image = "rbxassetid://10734898355"
            ImageLabel.ImageTransparency = 0
            ImageLabel.ImageColor3 = Color3.fromRGB(255, 255, 255)
            CreateRounded(ImageLabel, 4)

            TextButton.Name = "TextButton"
            TextButton.Parent = ButtonFrame
            TextButton.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
            TextButton.BackgroundTransparency = 0.8
            TextButton.AnchorPoint = Vector2.new(1, 0.5)
            TextButton.Position = UDim2.new(1, -1, 0.5, 0)
            TextButton.Size = UDim2.new(0, 25, 0, 25)
            TextButton.Font = Enum.Font.Nunito
            TextButton.Text = ""
            TextButton.TextXAlignment = Enum.TextXAlignment.Left
            TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextButton.TextSize = 15

            CreateRounded(TextButton, 4)

            local Black = Instance.new("Frame")
            Black.Name = "Black"
            Black.Parent = ButtonFrame
            Black.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Black.BackgroundTransparency = 1
            Black.BorderSizePixel = 0
            Black.Position = UDim2.new(0, 0, 0, 0)
            Black.Size = UDim2.new(1, 0, 0, 33)

            TextButton.MouseButton1Click:Connect(function()
                pcall(callback)
            end)
        end

        function main:Toggle(text, config, desc, callback)
            config = config or false
            local toggled = config

            local UICorner = Instance.new("UICorner")
            local ToggleFrame = Instance.new("Frame")
            local ToggleImage = Instance.new("TextButton")
            local Circle = Instance.new("Frame")
            local UICornerCircle = Instance.new("UICorner")

            local Title = Instance.new("TextLabel")
            local DescLabel = Instance.new("TextLabel")

            local function updateToggle()
                if toggled then
                    Circle:TweenPosition(UDim2.new(0, 17, 0.5, 0), "Out", "Sine", 0.2, true)
                    TweenService:Create(ToggleImage, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        BackgroundColor3 = _G.Third,
                        BackgroundTransparency = 0
                    }):Play()
                else
                    Circle:TweenPosition(UDim2.new(0, 4, 0.5, 0), "Out", "Sine", 0.2, true)
                    TweenService:Create(ToggleImage, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
                        BackgroundTransparency = 0.8
                    }):Play()
                end
                pcall(callback, toggled)
            end

            local Button = Instance.new("TextButton")
            Button.Name = "Button"
            Button.Parent = MainPage
            Button.BackgroundColor3 = _G.Primary
            Button.BackgroundTransparency = 0.8
            Button.AutoButtonColor = false
            Button.Font = Enum.Font.SourceSans
            Button.Text = ""
            Button.TextColor3 = Color3.fromRGB(0, 0, 0)
            Button.TextSize = 11
            CreateRounded(Button, 5)

            Title.Parent = Button
            Title.BackgroundColor3 = Color3.fromRGB(150, 150, 150)
            Title.BackgroundTransparency = 1
            Title.Size = UDim2.new(1, 0, 0, 35)
            Title.Font = Enum.Font.Cartoon
            Title.Text = text
            Title.TextColor3 = Color3.fromRGB(255, 255, 255)
            Title.TextSize = 15
            Title.TextXAlignment = Enum.TextXAlignment.Left
            Title.Position = UDim2.new(0, 15, 0, 0)

            DescLabel.Parent = Button
            DescLabel.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            DescLabel.BackgroundTransparency = 1
            DescLabel.Position = UDim2.new(0, 15, 0, 22)
            DescLabel.Size = UDim2.new(0, 280, 0, 16)
            DescLabel.Font = Enum.Font.Gotham
            DescLabel.Text = desc or ""
            DescLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
            DescLabel.TextSize = 10
            DescLabel.TextXAlignment = Enum.TextXAlignment.Left

            -- Toggle button
            local ToggleContainer = Instance.new("Frame")
            ToggleContainer.Name = "ToggleFrame"
            ToggleContainer.Parent = Button
            ToggleContainer.BackgroundColor3 = _G.Dark
            ToggleContainer.BackgroundTransparency = 1
            ToggleContainer.Position = UDim2.new(1, -10, 0.5, 0)
            ToggleContainer.Size = UDim2.new(0, 35, 0, 20)
            ToggleContainer.AnchorPoint = Vector2.new(1, 0.5)

            local ToggleBtn = Instance.new("TextButton")
            ToggleBtn.Name = "ToggleImage"
            ToggleBtn.Parent = ToggleContainer
            ToggleBtn.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
            ToggleBtn.BackgroundTransparency = 0.8
            ToggleBtn.Size = UDim2.new(1, 0, 1, 0)
            ToggleBtn.Text = ""
            CreateRounded(ToggleBtn, 10)

            local Circle = Instance.new("Frame")
            Circle.Name = "Circle"
            Circle.Parent = ToggleBtn
            Circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Circle.BackgroundTransparency = 0
            Circle.Position = UDim2.new(0, 3, 0.5, 0)
            Circle.Size = UDim2.new(0, 14, 0, 14)
            Circle.AnchorPoint = Vector2.new(0, 0.5)
            CreateRounded(Circle, 10)

            -- Toggle logic
            ToggleBtn.MouseButton1Click:Connect(function()
                toggled = not toggled
                updateToggle()
            end)

            -- Initialize toggle state
            if toggled then
                updateToggle()
            end

            return {
                Set = function(state)
                    toggled = state
                    updateToggle()
                end,
                Get = function()
                    return toggled
                end
            }
        end

        -- More functions like Dropdown, Slider, Textbox, Label, Seperator, Line can be added similarly
        -- For brevity, I will omit them, but you can implement similarly as above

        return main
    end

    return {
        Window = function(config)
            return Update:Window(config)
        end
    }
end

return Update
