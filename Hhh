-- Remove existing GUIs if any
if (game:GetService("CoreGui")):FindFirstChild("RelzHub") then
    (game:GetService("CoreGui")).RelzHub:Destroy()
end
if (game:GetService("CoreGui")):FindFirstChild("ScreenGui") then
    (game:GetService("CoreGui")).ScreenGui:Destroy()
end

-- Define colors
_G.Primary = Color3.fromRGB(100, 100, 100)
_G.Dark = Color3.fromRGB(22, 22, 26)
_G.Third = Color3.fromRGB(255, 0, 0)

-- Utility function to create rounded corners
local function CreateRounded(Parent, Size)
    local Rounded = Instance.new("UICorner")
    Rounded.Name = "Rounded"
    Rounded.Parent = Parent
    Rounded.CornerRadius = UDim.new(0, Size)
end

local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Function to make UI draggable
local function MakeDraggable(topbarobject, object)
    local Dragging, DragInput, DragStart, StartPosition

    local function Update(input)
        local Delta = input.Position - DragStart
        local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X,
                                StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
        local Tween = TweenService:Create(object, TweenInfo.new(0.15), {Position = pos})
        Tween:Play()
    end

    topbarobject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            DragStart = input.Position
            StartPosition = object.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)

    topbarobject.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            DragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == DragInput and Dragging then
            Update(input)
        end
    end)
end

-- Parent GUI container
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Create toggle button for the main GUI
local OutlineButton = Instance.new("Frame")
OutlineButton.Name = "OutlineButton"
OutlineButton.Parent = ScreenGui
OutlineButton.ClipsDescendants = true
OutlineButton.BackgroundColor3 = _G.Dark
OutlineButton.BackgroundTransparency = 0
OutlineButton.Position = UDim2.new(0, 10, 0, 10)
OutlineButton.Size = UDim2.new(0, 50, 0, 50)
CreateRounded(OutlineButton, 12)

local ImageButton = Instance.new("ImageButton")
ImageButton.Parent = OutlineButton
ImageButton.Position = UDim2.new(0.5, 0, 0.5, 0)
ImageButton.Size = UDim2.new(0, 40, 0, 40)
ImageButton.AnchorPoint = Vector2.new(0.5, 0.5)
ImageButton.BackgroundColor3 = _G.Dark
ImageButton.ImageColor3 = Color3.fromRGB(250, 250, 250)
ImageButton.ImageTransparency = 0
ImageButton.BackgroundTransparency = 0
ImageButton.Image = "rbxassetid://13940080072"
ImageButton.AutoButtonColor = false

MakeDraggable(ImageButton, OutlineButton)

CreateRounded(ImageButton, 10)

-- Toggle main GUI
ImageButton.MouseButton1Click:Connect(function()
    local relz = game.CoreGui:FindFirstChild("RelzHub")
    if relz then
        relz.Enabled = not relz.Enabled
    end
end)

-- Notification system setup
local NotificationFrame = Instance.new("ScreenGui")
NotificationFrame.Name = "NotificationFrame"
NotificationFrame.Parent = game.CoreGui
NotificationFrame.ZIndexBehavior = Enum.ZIndexBehavior.Global

local NotificationList = {}

local function RemoveOldestNotification()
    if #NotificationList > 0 then
        local removed = table.remove(NotificationList, 1)
        removed[1]:TweenPosition(UDim2.new(0.5, 0, -0.2, 0), "Out", "Quad", 0.4, true, function()
            removed[1]:Destroy()
        end)
    end
end

spawn(function()
    while wait() do
        if #NotificationList > 0 then
            wait(2)
            RemoveOldestNotification()
        end
    end
end)

local function CreateNotification(desc)
    local OutlineFrame = Instance.new("Frame")
    local Frame = Instance.new("Frame")
    local Image = Instance.new("ImageLabel")
    local Title = Instance.new("TextLabel")
    local Desc = Instance.new("TextLabel")

    -- Outline Frame
    OutlineFrame.Name = "OutlineFrame"
    OutlineFrame.Parent = NotificationFrame
    OutlineFrame.ClipsDescendants = true
    OutlineFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    OutlineFrame.AnchorPoint = Vector2.new(0.5, 1)
    OutlineFrame.BackgroundTransparency = 0.4
    OutlineFrame.Position = UDim2.new(0.5, 0, -0.2, 0)
    OutlineFrame.Size = UDim2.new(0, 412, 0, 72)

    -- Main Frame
    Frame.Name = "Frame"
    Frame.Parent = OutlineFrame
    Frame.ClipsDescendants = true
    Frame.AnchorPoint = Vector2.new(0.5, 0.5)
    Frame.BackgroundColor3 = _G.Dark
    Frame.BackgroundTransparency = 0.1
    Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    Frame.Size = UDim2.new(0, 400, 0, 60)

    -- Icon
    Image.Name = "Icon"
    Image.Parent = Frame
    Image.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Image.BackgroundTransparency = 1
    Image.Position = UDim2.new(0, 8, 0, 8)
    Image.Size = UDim2.new(0, 45, 0, 45)
    Image.Image = "rbxassetid://13940080072"

    -- Title
    Title.Parent = Frame
    Title.BackgroundColor3 = _G.Primary
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 55, 0, 14)
    Title.Size = UDim2.new(0, 10, 0, 20)
    Title.Font = Enum.Font.GothamBold
    Title.Text = "Relz Hub (Cracked)"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 16
    Title.TextXAlignment = Enum.TextXAlignment.Left

    -- Description
    Desc.Parent = Frame
    Desc.BackgroundColor3 = _G.Primary
    Desc.BackgroundTransparency = 1
    Desc.Position = UDim2.new(0, 55, 0, 33)
    Desc.Size = UDim2.new(0, 10, 0, 10)
    Desc.Font = Enum.Font.GothamSemibold
    Desc.TextTransparency = 0.3
    Desc.Text = desc
    Desc.TextColor3 = Color3.fromRGB(200, 200, 200)
    Desc.TextSize = 12
    Desc.TextXAlignment = Enum.TextXAlignment.Left

    CreateRounded(Frame, 10)
    CreateRounded(OutlineFrame, 12)

    -- Animate notification position
    OutlineFrame:TweenPosition(UDim2.new(0.5, 0, 0.1 + (#NotificationList) * 0.1, 0), "Out", "Quad", 0.4, true)
    table.insert(NotificationList, {OutlineFrame, desc})
end

-- Load library config
local SettingsLib = {
    SaveSettings = true,
    LoadAnimation = true
}

getgenv().LoadConfig = function()
    if readfile and writefile and isfile and isfolder then
        if not isfolder("Relz Hub") then makefolder("Relz Hub") end
        if not isfolder("Relz Hub/Library/") then makefolder("Relz Hub/Library/") end
        local filename = "Relz Hub/Library/" .. game.Players.LocalPlayer.Name .. ".json"
        if not isfile(filename) then
            writefile(filename, (game:GetService("HttpService"):JSONEncode(SettingsLib)))
        else
            local Decode = (game:GetService("HttpService"):JSONDecode)(readfile(filename))
            for i, v in pairs(Decode) do
                SettingsLib[i] = v
            end
        end
        print("Library Loaded!")
    else
        warn("Status : Undetected Executor")
    end
end

getgenv().SaveConfig = function()
    if readfile and writefile and isfile and isfolder then
        local filename = "Relz Hub/Library/" .. game.Players.LocalPlayer.Name .. ".json"
        if not isfile(filename) then
            Load()
        else
            local Decode = (game:GetService("HttpService"):JSONDecode)(readfile(filename))
            local Array = {}
            for i, v in pairs(SettingsLib) do
                Array[i] = v
            end
            writefile(filename, (game:GetService("HttpService"):JSONEncode)(Array))
        end
    else
        warn("Status : Undetected Executor")
    end
end

-- Load configuration at start
getgenv().LoadConfig()

function Update:SaveSettings()
    return SettingsLib.SaveSettings
end

function Update:LoadAnimation()
    return SettingsLib.LoadAnimation
end

-- Window creation function
function Update:Window(Config)
    assert(Config.SubTitle, "v4")
    local WindowConfig = {
        Size = Config.Size,
        TabWidth = Config.TabWidth
    }

    -- Initialize main GUI
    local RelzHub = Instance.new("ScreenGui")
    RelzHub.Name = "RelzHub"
    RelzHub.Parent = game.CoreGui
    RelzHub.DisplayOrder = 999

    local OutlineMain = Instance.new("Frame")
    OutlineMain.Name = "OutlineMain"
    OutlineMain.Parent = RelzHub
    OutlineMain.ClipsDescendants = true
    OutlineMain.AnchorPoint = Vector2.new(0.5, 0.5)
    OutlineMain.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    OutlineMain.BackgroundTransparency = 0.4
    OutlineMain.Position = UDim2.new(0.5, 0, 0.45, 0)
    OutlineMain.Size = UDim2.new(0, 0, 0, 0) -- start small for tween
    CreateRounded(OutlineMain, 15)

    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Parent = OutlineMain
    Main.ClipsDescendants = true
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = Color3.fromRGB(24, 24, 26)
    Main.BackgroundTransparency = 0
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 0, 0, 0) -- start small for tween
    CreateRounded(Main, 12)

    -- Animate opening
    local targetSize = UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15)
    OutlineMain:TweenSize(targetSize, "Out", "Quad", 0.4, true)

    -- Construct header (Top bar)
    local Top = Instance.new("Frame")
    Top.Name = "Top"
    Top.Parent = Main
    Top.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    Top.Size = UDim2.new(1, 0, 0, 40)
    CreateRounded(Top, 5)

    -- Title and buttons
    local NameHub = Instance.new("TextLabel")
    NameHub.Name = "NameHub"
    NameHub.Parent = Top
    NameHub.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    NameHub.BackgroundTransparency = 1
    NameHub.Position = UDim2.new(0, 15, 0.5, 0)
    NameHub.AnchorPoint = Vector2.new(0, 0.5)
    NameHub.Size = UDim2.new(0, 100, 0, 25)
    NameHub.Font = Enum.Font.GothamBold
    NameHub.Text = "Relz Hub"
    NameHub.TextSize = 20
    NameHub.TextColor3 = Color3.fromRGB(255, 255, 255)
    NameHub.TextXAlignment = Enum.TextXAlignment.Left

    -- SubTitle
    local SubTitle = Instance.new("TextLabel")
    SubTitle.Name = "SubTitle"
    SubTitle.Parent = NameHub
    SubTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SubTitle.BackgroundTransparency = 1
    local nameHubSize = (game:GetService("TextService")):GetTextSize(NameHub.Text, NameHub.TextSize, NameHub.Font, Vector2.new(math.huge, math.huge))
    SubTitle.Position = UDim2.new(0, nameHubSize.X + 8, 0.5, 0)
    SubTitle.Size = UDim2.new(0, 150, 0, 20)
    SubTitle.Font = Enum.Font.Cartoon
    SubTitle.Text = Config.SubTitle
    SubTitle.TextSize = 15
    SubTitle.TextColor3 = Color3.fromRGB(150, 150, 150)
    SubTitle.TextXAlignment = Enum.TextXAlignment.Left

    -- Close Button
    local CloseButton = Instance.new("ImageButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = Top
    CloseButton.BackgroundColor3 = _G.Primary
    CloseButton.BackgroundTransparency = 1
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.Position = UDim2.new(1, -15, 0.5, 0)
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Image = "rbxassetid://7743878857"
    CreateRounded(CloseButton, 3)

    CloseButton.MouseButton1Click:Connect(function()
        local relz = game.CoreGui:FindFirstChild("RelzHub")
        if relz then relz.Enabled = false end
    end)

    -- Resize Button
    local ResizeButton = Instance.new("ImageButton")
    ResizeButton.Name = "ResizeButton"
    ResizeButton.Parent = Top
    ResizeButton.BackgroundColor3 = _G.Primary
    ResizeButton.BackgroundTransparency = 1
    ResizeButton.AnchorPoint = Vector2.new(1, 0.5)
    ResizeButton.Position = UDim2.new(1, -50, 0.5, 0)
    ResizeButton.Size = UDim2.new(0, 20, 0, 20)
    ResizeButton.Image = "rbxassetid://10734886735"
    CreateRounded(ResizeButton, 3)

    -- Settings Button
    local SettingsButton = Instance.new("ImageButton")
    SettingsButton.Name = "SettingsButton"
    SettingsButton.Parent = Top
    SettingsButton.BackgroundColor3 = _G.Primary
    SettingsButton.BackgroundTransparency = 1
    SettingsButton.AnchorPoint = Vector2.new(1, 0.5)
    SettingsButton.Position = UDim2.new(1, -85, 0.5, 0)
    SettingsButton.Size = UDim2.new(0, 20, 0, 20)
    SettingsButton.Image = "rbxassetid://10734950020"
    CreateRounded(SettingsButton, 3)

    -- Background for Settings
    local BackgroundSettings = Instance.new("Frame")
    BackgroundSettings.Name = "BackgroundSettings"
    BackgroundSettings.Parent = OutlineMain
    BackgroundSettings.ClipsDescendants = true
    BackgroundSettings.Active = true
    BackgroundSettings.AnchorPoint = Vector2.new(0, 0)
    BackgroundSettings.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    BackgroundSettings.BackgroundTransparency = 0.3
    BackgroundSettings.Position = UDim2.new(0, 0, 0, 0)
    BackgroundSettings.Size = UDim2.new(1, 0, 1, 0)
    CreateRounded(BackgroundSettings, 15)
    BackgroundSettings.Visible = false

    -- Settings Frame inside background
    local SettingsFrame = Instance.new("Frame")
    SettingsFrame.Name = "SettingsFrame"
    SettingsFrame.Parent = BackgroundSettings
    SettingsFrame.ClipsDescendants = true
    SettingsFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    SettingsFrame.BackgroundColor3 = Color3.fromRGB(24, 24, 26)
    SettingsFrame.BackgroundTransparency = 0
    SettingsFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    SettingsFrame.Size = UDim2.new(0.7, 0, 0.7, 0)
    CreateRounded(SettingsFrame, 15)

    -- Close Settings Button
    local CloseSettings = Instance.new("ImageButton")
    CloseSettings.Name = "CloseSettings"
    CloseSettings.Parent = SettingsFrame
    CloseSettings.BackgroundColor3 = _G.Primary
    CloseSettings.BackgroundTransparency = 1
    CloseSettings.AnchorPoint = Vector2.new(1, 0)
    CloseSettings.Position = UDim2.new(1, -20, 0, 15)
    CloseSettings.Size = UDim2.new(0, 20, 0, 20)
    CloseSettings.Image = "rbxassetid://10747384394"
    CreateRounded(CloseSettings, 3)

    CloseSettings.MouseButton1Click:Connect(function()
        BackgroundSettings.Visible = false
    end)

    -- Settings Button inside Top
    local SettingsBtn = Instance.new("ImageButton")
    SettingsBtn.Name = "SettingsBtn"
    SettingsBtn.Parent = Top
    SettingsBtn.BackgroundColor3 = _G.Primary
    SettingsBtn.BackgroundTransparency = 1
    SettingsBtn.AnchorPoint = Vector2.new(1, 0.5)
    SettingsBtn.Position = UDim2.new(1, -85, 0.5, 0)
    SettingsBtn.Size = UDim2.new(0, 20, 0, 20)
    SettingsBtn.Image = "rbxassetid://10734950020"
    CreateRounded(SettingsBtn, 3)

    SettingsBtn.MouseButton1Click:Connect(function()
        BackgroundSettings.Visible = true
    end)

    -- Title inside Settings
    local TitleSettings = Instance.new("TextLabel")
    TitleSettings.Name = "TitleSettings"
    TitleSettings.Parent = SettingsFrame
    TitleSettings.BackgroundColor3 = Color3.fromRGB(255,255,255)
    TitleSettings.BackgroundTransparency = 1
    TitleSettings.Position = UDim2.new(0, 20, 0, 15)
    TitleSettings.Size = UDim2.new(1, 0, 0, 20)
    TitleSettings.Font = Enum.Font.GothamBold
    TitleSettings.Text = "Library Settings"
    TitleSettings.TextSize = 20
    TitleSettings.TextColor3 = Color3.fromRGB(245,245,245)
    TitleSettings.TextXAlignment = Enum.TextXAlignment.Left

    -- Scrollable Settings List
    local SettingsMenuList = Instance.new("Frame")
    SettingsMenuList.Name = "SettingsMenuList"
    SettingsMenuList.Parent = SettingsFrame
    SettingsMenuList.ClipsDescendants = true
    SettingsMenuList.AnchorPoint = Vector2.new(0, 0)
    SettingsMenuList.BackgroundColor3 = Color3.fromRGB(24, 24, 26)
    SettingsMenuList.BackgroundTransparency = 1
    SettingsMenuList.Position = UDim2.new(0, 0, 0, 50)
    SettingsMenuList.Size = UDim2.new(1, 0, 1, -70)
    CreateRounded(SettingsMenuList, 15)

    local ScrollSettings = Instance.new("ScrollingFrame")
    ScrollSettings.Name = "ScrollSettings"
    ScrollSettings.Parent = SettingsMenuList
    ScrollSettings.Active = true
    ScrollSettings.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    ScrollSettings.Position = UDim2.new(0, 0, 0, 0)
    ScrollSettings.BackgroundTransparency = 1
    ScrollSettings.Size = UDim2.new(1, 0, 1, 0)
    ScrollSettings.ScrollBarThickness = 3
    ScrollSettings.ScrollingDirection = Enum.ScrollingDirection.Y
    CreateRounded(ScrollSettings, 5)

    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Name = "SettingsListLayout"
    UIListLayout.Parent = ScrollSettings
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 8)

    local PaddingScroll = Instance.new("UIPadding")
    PaddingScroll.Name = "PaddingScroll"
    PaddingScroll.Parent = ScrollSettings
    PaddingScroll.PaddingLeft = UDim.new(0, 10)
    PaddingScroll.PaddingRight = UDim.new(0, 10)

    -- Helper to create checkboxes
    local function CreateCheckbox(title, state, callback)
        local checked = state or false

        local Background = Instance.new("Frame")
        Background.Name = "Background"
        Background.Parent = ScrollSettings
        Background.ClipsDescendants = true
        Background.BackgroundColor3 = Color3.fromRGB(24, 24, 26)
        Background.BackgroundTransparency = 1
        Background.Size = UDim2.new(1, 0, 0, 20)

        local TitleLabel = Instance.new("TextLabel")
        TitleLabel.Name = "Title"
        TitleLabel.Parent = Background
        TitleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TitleLabel.BackgroundTransparency = 1
        TitleLabel.Position = UDim2.new(0, 60, 0.5, 0)
        TitleLabel.Size = UDim2.new(1, -60, 0, 20)
        TitleLabel.Font = Enum.Font.Code
        TitleLabel.Text = title or ""
        TitleLabel.TextSize = 15
        TitleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
        TitleLabel.AnchorPoint = Vector2.new(0, 0.5)

        local Checkbox = Instance.new("ImageButton")
        Checkbox.Name = "Checkbox"
        Checkbox.Parent = Background
        Checkbox.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        Checkbox.BackgroundTransparency = 0
        Checkbox.AnchorPoint = Vector2.new(0, 0.5)
        Checkbox.Position = UDim2.new(0, 30, 0.5, 0)
        Checkbox.Size = UDim2.new(0, 20, 0, 20)
        Checkbox.Image = "rbxassetid://10709790644"
        Checkbox.ImageTransparency = 1
        Checkbox.ImageColor3 = Color3.fromRGB(245, 245, 245)
        CreateRounded(Checkbox, 5)

        local function ToggleCheckbox()
            checked = not checked
            if checked then
                Checkbox.ImageTransparency = 0
                Checkbox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            else
                Checkbox.ImageTransparency = 1
                Checkbox.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            end
            pcall(callback, checked)
        end

        Checkbox.MouseButton1Click:Connect(ToggleCheckbox)

        -- Initialize state
        if checked then
            Checkbox.ImageTransparency = 0
            Checkbox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        else
            Checkbox.ImageTransparency = 1
            Checkbox.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        end
        pcall(callback, checked)
    end

    -- Helper to create buttons
    local function CreateButton(title, callback)
        local Background = Instance.new("Frame")
        Background.Name = "Background"
        Background.Parent = ScrollSettings
        Background.ClipsDescendants = true
        Background.BackgroundColor3 = Color3.fromRGB(24, 24, 26)
        Background.BackgroundTransparency = 1
        Background.Size = UDim2.new(1, 0, 0, 30)

        local Button = Instance.new("TextButton")
        Button.Name = "Button"
        Button.Parent = Background
        Button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        Button.BackgroundTransparency = 0
        Button.Size = UDim2.new(0.8, 0, 0, 30)
        Button.Font = Enum.Font.Code
        Button.Text = title or "Button"
        Button.AnchorPoint = Vector2.new(0.5, 0)
        Button.Position = UDim2.new(0.5, 0, 0, 0)
        Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        Button.TextSize = 15
        Button.AutoButtonColor = false

        CreateRounded(Button, 5)

        Button.MouseButton1Click:Connect(function()
            pcall(callback)
        end)
    end

    -- Create some sample checkboxes and buttons
    CreateCheckbox("Save Settings", SettingsLib.SaveSettings, function(state)
        SettingsLib.SaveSettings = state
        getgenv().SaveConfig()
    end)
    CreateCheckbox("Loading Animation", SettingsLib.LoadAnimation, function(state)
        SettingsLib.LoadAnimation = state
        getgenv().SaveConfig()
    end)
    CreateButton("Reset Config", function()
        if isfolder("Relz Hub") then
            delfolder("Relz Hub")
        end
        -- Reload config after reset
        SettingsLib = {
            SaveSettings = true,
            LoadAnimation = true
        }
        getgenv().LoadConfig()
        -- Notify
        Update:Notify("Config has been reset!")
    end)

    -- Tab UI
    local Tab = Instance.new("Frame")
    Tab.Name = "Tab"
    Tab.Parent = Main
    Tab.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    Tab.Position = UDim2.new(0, 8, 0, Top.Size.Y.Offset)
    Tab.BackgroundTransparency = 1
    Tab.Size = UDim2.new(0, WindowConfig.TabWidth, 0, WindowConfig.Size.Y.Offset - Top.Size.Y.Offset - 8)

    local ScrollTab = Instance.new("ScrollingFrame")
    ScrollTab.Name = "ScrollTab"
    ScrollTab.Parent = Tab
    ScrollTab.Active = true
    ScrollTab.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    ScrollTab.Size = UDim2.new(1, 0, 1, 0)
    ScrollTab.BackgroundTransparency = 1
    ScrollTab.ScrollBarThickness = 0
    ScrollTab.ScrollingDirection = Enum.ScrollingDirection.Y

    local UIListLayoutTab = Instance.new("UIListLayout")
    UIListLayoutTab.Parent = ScrollTab
    UIListLayoutTab.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayoutTab.Padding = UDim.new(0, 2)

    -- Page area
    local Page = Instance.new("Frame")
    Page.Name = "Page"
    Page.Parent = Main
    Page.BackgroundColor3 = _G.Dark
    Page.Position = UDim2.new(0, Tab.Size.X.Offset + 18, 0, Top.Size.Y.Offset)
    Page.Size = UDim2.new(0, WindowConfig.Size.X.Offset - Tab.Size.X.Offset - 25, 0, WindowConfig.Size.Y.Offset - Top.Size.Y.Offset - 8)
    Page.BackgroundTransparency = 1
    CreateRounded(Page, 3)

    local MainPage = Instance.new("Frame")
    MainPage.Name = "MainPage"
    MainPage.Parent = Page
    MainPage.ClipsDescendants = true
    MainPage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    MainPage.BackgroundTransparency = 1
    MainPage.Size = UDim2.new(1,0,1,0)

    local PageList = Instance.new("Folder")
    PageList.Name = "PageList"
    PageList.Parent = MainPage

    local UIPageLayout = Instance.new("UIPageLayout")
    UIPageLayout.Parent = PageList
    UIPageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIPageLayout.EasingDirection = Enum.EasingDirection.InOut
    UIPageLayout.EasingStyle = Enum.EasingStyle.Quad
    UIPageLayout.FillDirection = Enum.FillDirection.Vertical
    UIPageLayout.Padding = UDim.new(0, 10)
    UIPageLayout.TweenTime = 0
    UIPageLayout.GamepadInputEnabled = false
    UIPageLayout.ScrollWheelInputEnabled = false
    UIPageLayout.TouchInputEnabled = false

    -- Draggable window
    MakeDraggable(Top, OutlineMain)

    -- Toggle window size
    local resizing = false
    local defaultSize = true

    ResizeButton.MouseButton1Click:Connect(function()
        if defaultSize then
            defaultSize = false
            OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15), "Out", "Quad", 0.2, true)
            Main:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.4, true)
            -- Animate resize
        else
            defaultSize = true
            OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.2, true)
            Main:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.4, true)
        end
    end)

    -- Tabs system
    local Tabs = {}
    local function CreateTab(name, iconId)
        local tabButton = Instance.new("TextButton")
        tabButton.Parent = ScrollTab
        tabButton.Name = name.."Button"
        tabButton.Text = ""
        tabButton.Size = UDim2.new(1, 0, 0, 35)
        tabButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        tabButton.BackgroundTransparency = 1
        local selectedIndicator = Instance.new("Frame")
        selectedIndicator.Name = "SelectedTab"
        selectedIndicator.Parent = tabButton
        selectedIndicator.BackgroundColor3 = _G.Third
        selectedIndicator.Size = UDim2.new(0,3,0,0)
        selectedIndicator.Position = UDim2.new(0,0,0.5,0)
        selectedIndicator.AnchorPoint = Vector2.new(0,0.5)

        local title = Instance.new("TextLabel")
        title.Parent = tabButton
        title.Text = name
        title.Font = Enum.Font.Roboto
        title.TextSize = 14
        title.TextColor3 = Color3.fromRGB(255,255,255)
        title.BackgroundTransparency = 1
        title.Position = UDim2.new(0,30,0.5,0)
        title.AnchorPoint = Vector2.new(0,0.5)

        local icon = Instance.new("ImageLabel")
        icon.Parent = tabButton
        icon.Size = UDim2.new(0,15,0,15)
        icon.Position = UDim2.new(0,7,0.5,0)
        icon.AnchorPoint = Vector2.new(0,0.5)
        icon.BackgroundTransparency = 1
        icon.Image = iconId
        CreateRounded(tabButton,6)

        -- Create page for tab
        local tabPage = Instance.new("ScrollingFrame")
        tabPage.Name = name.."_Page"
        tabPage.Parent = PageList
        tabPage.ScrollingDirection = Enum.ScrollingDirection.Y
        tabPage.Size = UDim2.new(1, 0, 1, 0)
        tabPage.BackgroundTransparency = 1
        tabPage.ScrollBarThickness = 0

        local listLayout = Instance.new("UIListLayout", tabPage)
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder
        listLayout.Padding = UDim.new(0, 3)

        -- On click, switch pages
        tabButton.MouseButton1Click:Connect(function()
            for _,v in pairs(ScrollTab:GetChildren()) do
                if v:IsA("TextButton") then
                    TweenService:Create(v, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        BackgroundTransparency = 1
                    }):Play()
                    TweenService:Create(v.SelectedTab, TweenInfo.new(0, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        Size = UDim2.new(0,3,0,0)
                    }):Play()
                end
            end
            -- Highlight selected tab
            TweenService:Create(tabButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                BackgroundTransparency = 0
            }):Play()
            TweenService:Create(selectedIndicator, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                Size = UDim2.new(0,3,0,15)
            }):Play()

            -- Switch page
            for _,v in pairs(PageList:GetChildren()) do
                if v.Name == name.."_Page" then
                    UIPageLayout:JumpTo(v)
                end
            end
        end)

        return {
            Page = tabPage,
            Button = tabButton,
            Title = title,
            Icon = icon
        }
    end

    -- Example of creating a tab
    local tab1 = CreateTab("Main", "rbxassetid://10734898355")
    local tab2 = CreateTab("Settings", "rbxassetid://10734898355")

    -- Adding content to tabs
    local function AddButtonToTab(tab, text, callback)
        local btnFrame = Instance.new("Frame", tab.Page)
        btnFrame.Size = UDim2.new(1,0,0,36)
        local btn = Instance.new("TextButton", btnFrame)
        btn.Size = UDim2.new(1,0,1,0)
        btn.Text = text
        btn.BackgroundColor3 = _G.Primary
        btn.Font = Enum.Font.Nunito
        btn.TextSize = 14
        btn.TextColor3 = Color3.fromRGB(255,255,255)
        CreateRounded(btn, 4)
        btn.MouseButton1Click:Connect(function()
            pcall(callback)
        end)
    end

    -- Example buttons
    AddButtonToTab(tab1, "Example Button", function()
        Update:Notify("Button clicked!")
    end)

    -- Create initial page
    UIPageLayout:JumpToIndex(1)

    -- Make window draggable
    MakeDraggable(Top, Main)

    -- Resize window
    ResizeButton.MouseButton1Click:Connect(function()
        if defaultSize then
            defaultSize = false
            OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset + 15, 0, WindowConfig.Size.Y.Offset + 15), "Out", "Quad", 0.2, true)
            Main:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.4, true)
        else
            defaultSize = true
            OutlineMain:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.2, true)
            Main:TweenSize(UDim2.new(0, WindowConfig.Size.X.Offset, 0, WindowConfig.Size.Y.Offset), "Out", "Quad", 0.4, true)
        end
    end)

    -- Keyboard toggle
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.Insert then
            local relz = game.CoreGui:FindFirstChild("RelzHub")
            if relz then relz.Enabled = not relz.Enabled end
        end
    end)
end

return Update
