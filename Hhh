local UI = {}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

local function CreateRounded(Parent, Radius)
    local corner = Instance.new("UICorner", Parent)
    corner.CornerRadius = UDim.new(0, Radius)
end

local function Tween(object, properties, duration)
    local tweenInfo = TweenInfo.new(duration)
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

function UI.CreateWindow(config)
    local window = {}
    local Colors = {
        Primary = config.Primary or Color3.fromRGB(30,30,30),
        Accent = config.Accent or Color3.fromRGB(255,0,0),
        Background = config.Background or Color3.fromRGB(20,20,20),
        TextColor = config.TextColor or Color3.new(1,1,1),
        LogoColor = config.LogoColor or Color3.fromRGB(255,255,255)
    }

    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "MyUILibrary"
    ScreenGui.Parent = game:GetService("CoreGui")
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- Main Frame
    local WindowFrame = Instance.new("Frame", ScreenGui)
    WindowFrame.Size = config.Size or UDim2.new(0, 700, 0, 500)
    WindowFrame.Position = config.Position or UDim2.new(0.5, -350, 0.5, -250)
    WindowFrame.BackgroundColor3 = Colors.Background
    WindowFrame.BorderSizePixel = 0
    CreateRounded(WindowFrame, 12)

    -- Hide/Close button
    local btnClose = Instance.new("TextButton", WindowFrame)
    btnClose.Size = UDim2.new(0, 40, 0, 40)
    btnClose.Position = UDim2.new(1, -45, 0, 5)
    btnClose.BackgroundColor3 = Colors.Primary
    btnClose.Text = "X"
    btnClose.TextColor3 = Colors.TextColor
    btnClose.Font = Enum.Font.GothamBold
    btnClose.TextSize = 20
    CreateRounded(btnClose, 8)

    -- Logo (hidden by default)
    local Logo = Instance.new("ImageLabel", WindowFrame)
    Logo.Size = UDim2.new(0, 50, 0, 50)
    Logo.Position = UDim2.new(0, 10, 0, 10)
    Logo.Image = "rbxassetid://13940080072" -- replace with your logo ID
    Logo.BackgroundTransparency = 1
    Logo.Visible = false

    btnClose.MouseButton1Click:Connect(function()
        WindowFrame.Visible = false
        Logo.Visible = true
    end)

    -- Toggle Hide/Show button
    local btnLogoHide = Instance.new("TextButton", WindowFrame)
    btnLogoHide.Size = UDim2.new(0, 40, 0, 40)
    btnLogoHide.Position = UDim2.new(1, -45, 0, 5)
    btnLogoHide.BackgroundColor3 = Colors.Primary
    btnLogoHide.Text = "Hide"
    btnLogoHide.TextColor3 = Colors.TextColor
    btnLogoHide.Font = Enum.Font.GothamBold
    btnLogoHide.TextSize = 14
    CreateRounded(btnLogoHide, 8)

    btnLogoHide.MouseButton1Click:Connect(function()
        WindowFrame.Visible = not WindowFrame.Visible
        Logo.Visible = not WindowFrame.Visible
    end)

    -- Sidebar with Tabs
    local Sidebar = Instance.new("Frame", WindowFrame)
    Sidebar.Size = UDim2.new(0, 150, 1, -50)
    Sidebar.Position = UDim2.new(0, 0, 0, 50)
    Sidebar.BackgroundColor3 = Colors.Primary
    CreateRounded(Sidebar, 12)

    -- Content container
    local ContentContainer = Instance.new("Frame", WindowFrame)
    ContentContainer.Size = UDim2.new(1, -150, 1, -50)
    ContentContainer.Position = UDim2.new(0, 150, 0, 50)
    ContentContainer.BackgroundTransparency = 1

    local currentPage = nil

    -- CreateTab function
    function window:CreateTab(name)
        local tabBtn = Instance.new("TextButton", Sidebar)
        tabBtn.Size = UDim2.new(1, -20, 0, 40)
        tabBtn.Position = UDim2.new(0, 10, 0, (#Sidebar:GetChildren() - 1) * 45 + 10)
        tabBtn.BackgroundColor3 = Colors.Background
        tabBtn.Text = name
        tabBtn.Font = Enum.Font.GothamBold
        tabBtn.TextSize = 14
        tabBtn.TextColor3 = Colors.TextColor
        CreateRounded(tabBtn, 8)

        local pageFrame = Instance.new("Frame", ContentContainer)
        pageFrame.Size = UDim2.new(1, 0, 1, 0)
        pageFrame.Position = UDim2.new(0, 0, 0, 0)
        pageFrame.BackgroundTransparency = 1
        pageFrame.Visible = false

        local page = {
            Frame = pageFrame
        }

        tabBtn.MouseButton1Click:Connect(function()
            if currentPage then
                currentPage.Frame.Visible = false
            end
            page.Frame.Visible = true
            currentPage = page
        end)

        -- AddPage function
        function page:AddPage(pageName)
            -- create page button
            local pageBtn = Instance.new("TextButton", Sidebar)
            pageBtn.Size = UDim2.new(1, -20, 0, 40)
            pageBtn.Position = UDim2.new(0, 10, 0, (#Sidebar:GetChildren() - 1) * 45 + 10)
            pageBtn.BackgroundColor3 = Colors.Background
            pageBtn.Text = pageName
            pageBtn.Font = Enum.Font.GothamBold
            pageBtn.TextSize = 14
            pageBtn.TextColor3 = Colors.TextColor
            CreateRounded(pageBtn, 8)

            local pageFrame = Instance.new("Frame", ContentContainer)
            pageFrame.Size = UDim2.new(1, 0, 1, 0)
            pageFrame.Position = UDim2.new(0, 0, 0, 0)
            pageFrame.BackgroundTransparency = 1
            pageFrame.Visible = false

            local subPage = {
                Frame = pageFrame
            }

            pageBtn.MouseButton1Click:Connect(function()
                if currentPage then
                    currentPage.Frame.Visible = false
                end
                subPage.Frame.Visible = true
                currentPage = subPage
            end)

            return subPage
        end

        return page
    end

    -- Create components functions

    function window:CreateButton(parent, text, callback)
        local btn = Instance.new("TextButton", parent)
        btn.Size = UDim2.new(1, -20, 0, 40)
        btn.BackgroundColor3 = Colors.Primary
        btn.Text = text
        btn.Font = Enum.Font.GothamBold
        btn.TextSize = 14
        btn.TextColor3 = Colors.TextColor
        CreateRounded(btn, 8)
        btn.MouseButton1Click:Connect(function()
            pcall(callback)
        end)
        return btn
    end

    function window:CreateLabel(parent, text)
        local label = Instance.new("TextLabel", parent)
        label.Size = UDim2.new(1, -20, 0, 30)
        label.BackgroundTransparency = 1
        label.Text = text
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextColor3 = Colors.TextColor
        label.TextXAlignment = Enum.TextXAlignment.Left
        return label
    end

    function window:CreateSwitch(parent, text, default, callback)
        local toggled = default
        local container = Instance.new("Frame", parent)
        container.Size = UDim2.new(1, -20, 0, 40)
        container.BackgroundTransparency = 1

        local label = Instance.new("TextLabel", container)
        label.Text = text
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextColor3 = Colors.TextColor
        label.Size = UDim2.new(0.7, 0, 1, 0)
        label.BackgroundTransparency = 1

        local toggleFrame = Instance.new("Frame", container)
        toggleFrame.Size = UDim2.new(0, 50, 0, 20)
        toggleFrame.Position = UDim2.new(0.75, 0, 0.5, -10)
        toggleFrame.BackgroundColor3 = Colors.Background
        CreateRounded(toggleFrame, 10)

        local toggleBtn = Instance.new("TextButton", toggleFrame)
        toggleBtn.Size = UDim2.new(1, 0, 1, 0)
        toggleBtn.BackgroundTransparency = 1
        toggleBtn.Text = ""

        local circle = Instance.new("Frame", toggleBtn)
        circle.Size = UDim2.new(0, 14, 0, 14)
        circle.Position = UDim2.new(0, 3, 0.5, -7)
        circle.AnchorPoint = Vector2.new(0, 0.5)
        circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        CreateRounded(circle, 7)

        local function update()
            if toggled then
                circle.Position = UDim2.new(0, 17, 0, 3)
                TweenService:Create(circle, TweenInfo.new(0.2), {BackgroundColor3 = Colors.Accent}):Play()
            else
                circle.Position = UDim2.new(0, 3, 0, 3)
                TweenService:Create(circle, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255,255,255)}):Play()
            end
            pcall(callback, toggled)
        end

        toggleBtn.MouseButton1Click:Connect(function()
            toggled = not toggled
            update()
        end)

        -- initialize
        toggled = default
        update()

        return {
            Get = function() return toggled end,
            Set = function(val) toggled = val; update() end
        }
    end

    function window:CreateDropdown(parent, labelText, options, default, callback)
        local selected = default or options[1]
        local container = Instance.new("Frame", parent)
        container.Size = UDim2.new(1, -20, 0, 50)
        container.BackgroundTransparency = 1

        local label = Instance.new("TextLabel", container)
        label.Text = labelText
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextColor3 = Colors.TextColor
        label.Size = UDim2.new(1, 0, 0, 20)

        local dropdownBtn = Instance.new("TextButton", container)
        dropdownBtn.Size = UDim2.new(1, 0, 0, 30)
        dropdownBtn.Position = UDim2.new(0, 0, 0, 20)
        dropdownBtn.BackgroundColor3 = Colors.Primary
        dropdownBtn.Text = selected
        dropdownBtn.Font = Enum.Font.GothamBold
        dropdownBtn.TextColor3 = Colors.TextColor
        CreateRounded(dropdownBtn, 8)

        local optionsFrame = Instance.new("Frame", container)
        optionsFrame.Size = UDim2.new(1, 0, 0, 0)
        optionsFrame.Position = UDim2.new(0, 0, 0, 50)
        optionsFrame.BackgroundColor3 = Colors.Background
        optionsFrame.ClipsDescendants = true
        CreateRounded(optionsFrame, 8)

        local function toggleOptions()
            if optionsFrame.Size.Y.Offset == 0 then
                local totalHeight = #options * 30
                Tween(optionsFrame, {Size = UDim2.new(1, 0, 0, totalHeight)}, 0.2)
            else
                Tween(optionsFrame, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
            end
        end

        for _, opt in ipairs(options) do
            local optBtn = Instance.new("TextButton", optionsFrame)
            optBtn.Size = UDim2.new(1, -10, 0, 30)
            optBtn.Position = UDim2.new(0, 5, 0, (#options - _) * 30)
            optBtn.BackgroundColor3 = Colors.Primary
            optBtn.Text = opt
            optBtn.Font = Enum.Font.Gotham
            optBtn.TextColor3 = Colors.TextColor
            CreateRounded(optBtn, 6)

            optBtn.MouseButton1Click:Connect(function()
                selected = opt
                dropdownBtn.Text = opt
                toggleOptions()
                pcall(callback, opt)
            end)
        end

        dropdownBtn.MouseButton1Click:Connect(toggleOptions)

        return {
            Get = function() return selected end,
            Set = function(val)
                selected = val
                dropdownBtn.Text = val
            end
        }
    end

    function window:CreateTextbox(parent, labelText, defaultText, callback)
        local container = Instance.new("Frame", parent)
        container.Size = UDim2.new(1, -20, 0, 50)
        container.BackgroundTransparency = 1

        local label = Instance.new("TextLabel", container)
        label.Text = labelText
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextColor3 = Colors.TextColor
        label.Size = UDim2.new(1, 0, 0, 20)

        local box = Instance.new("TextBox", container)
        box.Size = UDim2.new(1, 0, 0, 30)
        box.Position = UDim2.new(0, 0, 0, 20)
        box.BackgroundColor3 = Colors.Primary
        box.Text = defaultText or ""
        box.Font = Enum.Font.Gotham
        box.TextSize = 14
        box.TextColor3 = Colors.TextColor
        CreateRounded(box, 6)

        box.FocusLost:Connect(function()
            pcall(callback, box.Text)
        end)

        return box
    end

    function window:CreateSlider(parent, labelText, min, max, default, callback)
        local value = default or min
        local container = Instance.new("Frame", parent)
        container.Size = UDim2.new(1, -20, 0, 50)
        container.BackgroundTransparency = 1

        local label = Instance.new("TextLabel", container)
        label.Text = labelText
        label.Font = Enum.Font.Gotham
        label.TextSize = 14
        label.TextColor3 = Colors.TextColor
        label.Size = UDim2.new(1, 0, 0, 20)

        local sliderFrame = Instance.new("Frame", container)
        sliderFrame.Size = UDim2.new(1, -20, 0, 20)
        sliderFrame.Position = UDim2.new(0, 10, 0, 30)
        sliderFrame.BackgroundColor3 = Colors.Background
        CreateRounded(sliderFrame, 4)

        local fill = Instance.new("Frame", sliderFrame)
        fill.Size = UDim2.new((value - min)/(max - min), 0, 1, 0)
        fill.BackgroundColor3 = Colors.Accent
        fill.BorderSizePixel = 0
        CreateRounded(fill, 4)

        local handle = Instance.new("Frame", sliderFrame)
        handle.Size = UDim2.new(0, 14, 0, 14)
        handle.Position = UDim2.new((value - min)/(max - min), -7, 0.5, -7)
        handle.BackgroundColor3 = Color3.fromRGB(255,255,255)
        CreateRounded(handle, 7)

        local dragging = false

        handle.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
            end
        end)
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mouseX = input.Position.X
                local sliderPos = sliderFrame.AbsolutePosition.X
                local sliderWidth = sliderFrame.AbsoluteSize.X
                local newPercent = math.clamp((mouseX - sliderPos)/sliderWidth, 0, 1)
                handle.Position = UDim2.new(newPercent, -7, 0.5, -7)
                fill.Size = UDim2.new(newPercent, 0, 1, 0)
                value = min + newPercent * (max - min)
                pcall(callback, value)
            end
        end)

        return {
            Get = function() return value end,
            Set = function(val)
                value = math.clamp(val, min, max)
                local percent = (value - min)/(max - min)
                handle.Position = UDim2.new(percent, -7, 0.5, -7)
                fill.Size = UDim2.new(percent, 0, 1, 0)
            end
        }
    end

    function window:CreateFolder(parent, name)
        local folder = {}
        local folderFrame = Instance.new("Frame", parent)
        folderFrame.Size = UDim2.new(1, -20, 0, 30)
        folderFrame.BackgroundColor3 = Colors.Primary
        CreateRounded(folderFrame, 6)

        local label = Instance.new("TextLabel", folderFrame)
        label.Text = name
        label.Font = Enum.Font.GothamBold
        label.TextSize = 14
        label.TextColor3 = Colors.TextColor
        label.Size = UDim2.new(1, -60, 1, 0)
        label.Position = UDim2.new(0, 10, 0, 0)

        local btnExpand = Instance.new("TextButton", folderFrame)
        btnExpand.Size = UDim2.new(0, 30, 1, 0)
        btnExpand.Position = UDim2.new(1, -30, 0, 0)
        btnExpand.BackgroundColor3 = Colors.Background
        btnExpand.Text = "+"
        CreateRounded(btnExpand, 4)

        local childrenFolder = Instance.new("Folder", parent)
        local expanded = false

        btnExpand.MouseButton1Click:Connect(function()
            expanded = not expanded
            btnExpand.Text = expanded and "-" or "+"
            for _, child in ipairs(childrenFolder:GetChildren()) do
                child.Visible = expanded
            end
        end)

        -- AddComponent method for folder
        function folder:AddComponent(componentType, name, ...)
            local comp
            if componentType == "Button" then
                comp = UI.CreateButton(childrenFolder, name, ...)
            elseif componentType == "Label" then
                comp = UI.CreateLabel(childrenFolder, name)
            elseif componentType == "Switch" then
                comp = UI.CreateSwitch(childrenFolder, name, ...)
            elseif componentType == "Dropdown" then
                comp = UI.CreateDropdown(childrenFolder, name, {...}, ..., ...)
            elseif componentType == "Textbox" then
                comp = UI.CreateTextbox(childrenFolder, name, ..., ...)
            elseif componentType == "Slider" then
                comp = UI.CreateSlider(childrenFolder, name, ..., ...)
            end
            return comp
        end

        return folder
    end

    -- Hide / Show with Logo
    function window:Hide()
        WindowFrame.Visible = false
        Logo.Visible = true
    end
    function window:Show()
        WindowFrame.Visible = true
        Logo.Visible = false
    end

    return window
end

return UI
